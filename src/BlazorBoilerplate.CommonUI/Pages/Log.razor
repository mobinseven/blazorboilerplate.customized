@page "/log"
@attribute [Authorize]
@inject HttpClient Http
@inject IMatToaster matToaster
@inject IJSRuntime JSRuntime
@implements IDisposable
@if (apiLogItems == null)
{
    <LoadingBackground ShowLogoBox="true">
    </LoadingBackground>
}
else
{
    <h3 align="center">گزارش سامانه</h3>
    @*<p>
            در این بخش گزارش دادوستدهای  کاربران با سامانه نمایش داده شده است.
        </p>*@
    <div class="row">
        <div class="col pl-0">
            <div class="input-group">
                <div class="input-group-append">
                    <span class="input-group-text pr-2 pl-2">از</span>
                </div>
                <input class="input-group-prepend DatePicker from form-control" type="text" />
                <div class="input-group-prepend">
                    <button class="p-1 DatePickerClear from btn btn-sm btn-outline-secondary" type="button"><i class="fa fa-times"></i></button>
                </div>
            </div>
        </div>
        <div class="col pr-0">
            <div class="input-group">
                <div class="input-group-append">
                    <span class="input-group-text pr-2 pl-2">تا</span>
                </div>
                <input class="input-group-prepend DatePicker to form-control" type="text" />
                <div class="input-group-prepend">
                    <button class="p-1 DatePickerClear to btn btn-sm btn-outline-secondary" type="button"><i class="fa fa-times"></i></button>
                </div>
            </div>
        </div>
    </div>
    <div style="display: block;
        width: 100%;
        overflow-x: hidden;
        -webkit-overflow-scrolling: touch;">
        <table class="table compact table-sm table-bordered" style="cursor: pointer !important;font-size: medium">
            <thead>
                <tr>
                    <th class="min"><i class="fa fa-clock-o fa-fw"></i></th>
                    <th><i class="fa fa-user fa-fw"></i></th>
                    <th><i class="fa fa-building fa-fw"></i></th>
                    <th class="none"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var context in apiLogItems)
                {
                    string method = context.Method.ToUpper();
                    if (method == "GET") continue;
                    string color = "dark";
                    string icon = "tint";
                    string verb = "";
                    switch (method)
                    {
                        case "PUT": color = "primary"; icon = "pencil"; verb = "ویرایش کرده"; break;
                        case "POST": color = "success"; icon = "plus"; verb = "افزوده"; break;
                        case "DELETE": color = "danger"; icon = "trash"; verb = "پاک کرده"; break;
                    }

                    <tr class="table-@color">
                        <td class="min datetime" data-order="@Utility.UnixTimestampSeconds(context.RequestTime)" data-search="@Utility.UnixTimestampSeconds(context.RequestTime)">
                        </td>
                        <td>@context.UserName</td>
                        <td>@context.Path.Split('/')[2]</td>
                        <td>
                            @if (method == "DELETE" || method == "POST")
                            {
                                JObject obj = JsonConvert.DeserializeObject<JObject>(context.ResponseBody);

                                <table style="width:100%">
                                    @{ var props = obj.Properties().ToArray();
                                    }

                                    @for (int p = 1; p < props.Count(); p++)
                                    {
                                        <tr>
                                            <td class="min">@props[p].Name</td>
                                            <td>@props[p].Value</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="2">
                                            <span class="text-@color">
                                                <i class="fa fa-@icon fa-fw"></i>@verb
                                            </span>
                                        </td>
                                    </tr>
                                </table>

                            }
                            @if (method == "PUT")
                            {
                                JArray obj = JsonConvert.DeserializeObject<JArray>(context.ResponseBody);
                                var NewProps = obj[0].ToObject<JObject>().Properties().ToArray();
                                var OldProps = obj[1].ToObject<JObject>().Properties().ToArray();
                                <div>
                                    <table style="width:100%">
                                        @for (int p = 1; p < NewProps.Count(); p++)
                                        {
                                            <tr>
                                                <td class="min"><strong>@NewProps[p].Name&nbsp;</strong></td>
                                                <td>
                                                    @if (OldProps[p].Value.ToString() != NewProps[p].Value.ToString())
                                                    {
                                                        <span class="text-danger" style="text-decoration:line-through">
                                                            @OldProps[p].Value
                                                        </span>
                                                        <span class="text-@color">
                                                            <i class="fa fa-@icon fa-fw"></i>
                                                        </span>
                                                    }
                                                    <span>&nbsp;@NewProps[p].Value</span>
                                                </td>
                                            </tr>
                                        }
                                    </table>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    List<ApiLogItemDto> apiLogItems;

    protected override async Task OnInitializedAsync()
    {
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>("api/apilog");

        if (apiResponse.StatusCode == 200)
        {
            apiLogItems = JsonConvert.DeserializeObject<ApiLogItemDto[]>(apiResponse.Result.ToString()).ToList<ApiLogItemDto>();
        }
        else
        {
            matToaster.Add(apiResponse.Message, MatToastType.Danger, "Api Log Items Retrieval Failed");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("MakeDataTable");
            await JSRuntime.InvokeVoidAsync("ConvertAllTimeCells");

        }
    }
    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("DestroyDataTable");
    }

}