@page "/books"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
<h3>Books</h3>
@if (books == null)
{
<LoadingBackground ShowLogoBox="true">
    <label>Loading Books</label>
</LoadingBackground>
}
else
{
<table>
    <thead>
        <th>Title</th>
        <th>Author</th>
        <th>Book Store</th>
    </thead>
        <tbody>
            @foreach (var BookRow in books)
            {
                <tr>
                    <td><div style="width:130px;">@BookRow.Title</div></td>
                    <td><div style="width:130px;">@BookRow.Author</div></td>
                    <td><div style="width:130px;">@BookRow.BookStoreTitle</div></td>
                </tr>
            }
        </tbody>
</table>
}
@code {
    public class Book
    {
        public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        public string Author { get; set; }

        public string BookStoreTitle { get; set; }
    }
    List<Book> books = new List<Book>();
    protected override async Task OnInitializedAsync()
    {
        await RetrieveBooksList();
    }
    public async Task RetrieveBooksList()
    {
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>("/api/Books/GetAllBooks");
        if (apiResponse.StatusCode == 200)
        {
            //matToaster.Add(apiResponse.Message, MatToastType.Success, "Books Retrieved");
            books = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Book>>(apiResponse.Result.ToString());
        }
        else
        {
            //matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Books Retrieval Failed");
        }
    }
}