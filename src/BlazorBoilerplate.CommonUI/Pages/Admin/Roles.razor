@page "/admin/roles"
@attribute [Authorize(Permissions.Role.Read)]
@inject HttpClient Http
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider authStateProvider
@inject AppState appState

<h1>Roles</h1>
<p>Roles Management.</p>

@if (roles == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Loading Roles</label>
    </LoadingBackground>
}
else
{
    <MatTable Class="mat-elevation-z5" Items="@roles" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" ApiUrl="api/roles"
              DebounceMilliseconds="150">
        <MatTableHeader>
            <th>
                <AuthorizeView Policy="@Permissions.Role.Create">
                    <MatButton Icon="add" Label="New Role" OnClick="@(() => OpenUpsertRoleDialog())"></MatButton>
                </AuthorizeView>
            </th>
            <th>Name</th>
            <th>Permissions</th>
        </MatTableHeader>
        <MatTableRow Context="RoleRow">
            <td>
                <div style="width:155px;">
                    <AuthorizeView Policy="@Permissions.Role.Update">
                        <MatIconButton Icon="edit" OnClick="@(() => OpenUpsertRoleDialog(@RoleRow.Name))"></MatIconButton>
                    </AuthorizeView>
                    <AuthorizeView Policy="@Permissions.Role.Delete">
                        <MatIconButton Icon="delete" OnClick="@(() => OpenDeleteDialog(@RoleRow.Name))"></MatIconButton>
                    </AuthorizeView>
                </div>
            </td>
            <td><div style="width:130px;">@RoleRow.Name</div></td>
            <td>
                <MatChipSet>
                    @foreach (var permission in @RoleRow.Permissions)
                        {
                        <MatChip Label="@permission"></MatChip>
                        }
                </MatChipSet>
            </td>
        </MatTableRow>
    </MatTable>
}

@*<MatDialog @bind-IsOpen="@isUpsertRoleDialogOpen">
        <MatDialogTitle>
            @labelUpsertDialogTitle
        </MatDialogTitle>
        <MatDialogContent>
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@currentRoleName" Disabled="@isCurrentRoleReadOnly" Label="Role Name" Icon="add" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                </div>
            </fieldset>

        <MatTable Items="@permissionsSelections" Class="mat-elevation-z5" ShowPaging="true">
            <MatTableHeader>
                <th>Permissions</th>
                <th>Allow</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Name</td>
                <td><MatCheckbox TValue="bool" @bind-Value="@context.IsSelected"></MatCheckbox></td>
            </MatTableRow>
        </MatTable>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { isUpsertRoleDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@UpsertRole">@labelUpsertDialogOkButton</MatButton>
    </MatDialogActions>
</MatDialog>

    <MatDialog @bind-IsOpen="@isDeleteRoleDialogOpen" Style="z-index:100">
        <MatDialogTitle><MatIcon Icon="warning"></MatIcon> Confirm Delete</MatDialogTitle>
        <MatDialogContent>
            Are you sure you want to delete the role "@currentRoleName" ?
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { isDeleteRoleDialogOpen = false; })">Cancel</MatButton>
            <MatButton OnClick="@DeleteRoleAsync">Delete</MatButton>
        </MatDialogActions>
    </MatDialog>*@

@code {
    int pageSize { get; set; } = 15;
    int currentPage { get; set; } = 0;

    string currentRoleName = "";
    bool isCurrentRoleReadOnly = false;

    List<RoleDto> roles;

    #region OnInitializedAsync

    protected override async Task OnInitializedAsync()
    {
        await InitializeRolesListAsync();
    }

    public async Task InitializeRolesListAsync()
    {
        string queryString = "?pageSize=" + pageSize.ToString() + "&pageNumber=" + currentPage.ToString(); // this is to support pagination in the future, need to integrate with MatTable
        ApiResponseDto apiResponse = await Http.GetJsonAsync<ApiResponseDto>("api/Admin/Roles" + queryString);

        if (apiResponse.StatusCode == 200)
        {
            //matToaster.Add(apiResponse.Message, MatToastType.Success, "Roles Retrieved");
            roles = Newtonsoft.Json.JsonConvert.DeserializeObject<List<RoleDto>>(apiResponse.Result.ToString());
        }
        else
        {
            //matToaster.Add(apiResponse.Message + " : " + apiResponse.StatusCode, MatToastType.Danger, "Roles Retrieval Failed");
        }
    }

    #endregion

    #region OpenUpsertRoleDialog

    bool isUpsertRoleDialogOpen = false;
    bool isInsertOperation;
    List<PermissionSelection> permissionsSelections = new List<PermissionSelection>();

    string labelUpsertDialogTitle;
    string labelUpsertDialogOkButton;

    public class PermissionSelection
    {
        public bool IsSelected { get; set; }
        public string Name { get; set; }
    };

    public async Task OpenUpsertRoleDialog(string roleName = "")
    {
        currentRoleName = roleName;

        isInsertOperation = (roleName == "");

        // Update the UI
        if (isInsertOperation)
        {
            labelUpsertDialogTitle = "Create Role";
            labelUpsertDialogOkButton = "Create Role";
        }
        else
        {
            labelUpsertDialogTitle = "Edit Role";
            labelUpsertDialogOkButton = "Update Role";
        }

        // Retrieve the role
        RoleDto role = null;
        isCurrentRoleReadOnly = (roleName != "");
        if (roleName != "")
        {
            var roleResponse = await Http.GetJsonAsync<ApiResponseDto>("api/Admin/Role/" + roleName);
            role = Newtonsoft.Json.JsonConvert.DeserializeObject<RoleDto>(roleResponse.Result.ToString());
        }

        // Setup the permissions
        var response = await Http.GetJsonAsync<ApiResponseDto>("api/Admin/Permissions");
        permissionsSelections.Clear();
        var permissions = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(response.Result.ToString());

        foreach (var name in permissions)
        {
            permissionsSelections.Add(new PermissionSelection
            {
                Name = name,
                IsSelected = (role == null) ? false : role.Permissions.Contains(name)
            });
        }

        this.isUpsertRoleDialogOpen = true;
    }

    public async Task UpsertRole()
    {
        if (!String.IsNullOrWhiteSpace(currentRoleName))
        {

            RoleDto request = new RoleDto
            {
                Name = currentRoleName,
                Permissions = new List<string>()
            };

            foreach (var status in permissionsSelections)
            {
                if (status.IsSelected)
                    request.Permissions.Add(status.Name);
            }

            ApiResponseDto apiResponse;
            if (isInsertOperation)
                apiResponse = await Http.PostJsonAsync<ApiResponseDto>("api/Admin/Role", request);
            else
                apiResponse = await Http.PutJsonAsync<ApiResponseDto>("api/Admin/Role", request);

            if (apiResponse.StatusCode == 200)
            {
                //if (isInsertOperation)
                //    matToaster.Add("Role Created", MatToastType.Success);
                //else
                //    matToaster.Add("Role Updated", MatToastType.Success);
                //await PopulateRoleList();
                StateHasChanged();
            }
            else
            {
                //matToaster.Add(apiResponse.Message, MatToastType.Danger);
            }

        // this.StateHasChanged();

        isUpsertRoleDialogOpen = false;
        await OnInitializedAsync();
    }

    #endregion

    #region OpenDeleteDialog

    bool isDeleteRoleDialogOpen = false;

    public void OpenDeleteDialog(string roleName)
    {
        currentRoleName = roleName;
        isDeleteRoleDialogOpen = true;
    }

    public async Task DeleteRoleAsync()
    {
        var response = await Http.DeleteAsync("api/Admin/Role/" + currentRoleName);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {

            //matToaster.Add("Role Deleted", MatToastType.Success);
            await OnInitializedAsync();
            isDeleteRoleDialogOpen = false;
            StateHasChanged();
        }
    }

    #endregion

}