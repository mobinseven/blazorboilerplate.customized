@inject IJSRuntime JSRuntime

@if (message.Incoming)
{
    <div class="msg">
        <div class="received_msg">
            <span class="time_date" style="text-align: left;">@message.UserName</span>
            <p>
                @message.Text
            </p>
            <span class="time_date datetime" data-order="@Utility.UnixTimestampSeconds(message.When)"></span>
        </div>
    </div>
}
else
{
    <div class="msg">
        <div class="outgoing_msg">
            <p>
                @message.Text
            </p>
            <span class="time_date datetime" data-order="@Utility.UnixTimestampSeconds(message.When)">
            </span>
        </div>
    </div>
}

@*<EditForm Model="@messageDto" OnValidSubmit="@DeleteMessage">
        <MatListItem Class="@messageDto.CSS">
            <MatListItemText Style="width: 100%;">
                <MatListItemPrimaryText>
                    @messageDto.Text
                </MatListItemPrimaryText>
                <MatListItemSecondaryText>
                    در @ از @messageDto.UserName
                </MatListItemSecondaryText>
            </MatListItemText>
            <MatIconButton Icon="delete"
                           Type="submit"
                           Style="float: right;">
            </MatIconButton>
        </MatListItem>
        <MatListDivider></MatListDivider>
    </EditForm>*@

@code
{
    [Parameter]
    public Func<MessageDto, Task> Delete { get; set; }

    [Parameter]
    public MessageDto message { get; set; }

    async Task DeleteMessage()
    {
        await Delete(message);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("ConvertAllTimeCellsFromNow");

        }
    }
}