@using Microsoft.AspNetCore.Components;
@inject NavigationManager navigationManager
@layout LoginLayout
@inject AuthenticationStateProvider authStateProvider
@inject IMatToaster matToaster
@inject AppState appState
@if (IsLoggedIn)
{

    <div class="bg-light text-right" id="sidebar-wrapper" dir="rtl" style="margin:0 2rem 8rem 2rem;">
        <div class="list-group list-group-flush">
            <button @onclick="@(e=>navigationManager.NavigateTo(" "))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-home fa-fw"></i>پیشگفتار</div></button>
            @*<button @onclick="@(e=>navigationManager.NavigateTo("todo_list"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-list-alt fa-fw"></i>&nbsp;فهرست کارها</div></button>*@
            <button @onclick="@(e=>navigationManager.NavigateTo("log"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-eye fa-fw"></i>&nbsp;گزارش سامانه</div></button>
            @*<button @onclick="@(e=>navigationManager.NavigateTo("dashboard"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-tachometer fa-fw"></i>پیشخوان</div></button>*@
            @*<button @onclick="@(e=>navigationManager.NavigateTo("admin/users"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-users fa-fw"></i>کاربران</div></button>*@
            @*<button @onclick="@(e=>navigationManager.NavigateTo("admin/roles"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-key fa-fw"></i>دسترسی‌ها</div></button>*@
            <button @onclick="@(e=>navigationManager.NavigateTo("forum"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-comments fa-fw"></i>پیام‌رسان</div></button>
            <button @onclick="@(e=>navigationManager.NavigateTo("account/profile"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-user-circle fa-fw"></i>کاربر: @userInfo.UserName</div></button>
            <button @onclick="@(e=>LogoutClick())" href="@navigationManager.ToAbsoluteUri(" ").AbsoluteUri" class="list-group-item btn btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-sign-out fa-fw"></i>پایان کار با برنامه</div></button>
        </div>
    </div>
}
else
{
    <div class="text-center m-5">
        <EditForm Model="@loginParameters" OnValidSubmit="@SubmitLogin">
            <MatThemeProvider Theme="@theme1">
                <div class="form-signin" dir="ltr">
                    <fieldset>
                        <p>
                            <MatTextField @bind-Value="@loginParameters.UserName" Label="نام کاربری" Icon="person" IconTrailing="true" Outlined="true" Required="true"></MatTextField>
                        </p>
                        <p>
                            <MatTextField @bind-Value="@loginParameters.Password" Label="گذرواژه" Icon="lock" IconTrailing="true" Outlined="true" Required="true" Type="password"></MatTextField>
                        </p>
                        <p>
                            <MatCheckbox @bind-Value="@loginParameters.RememberMe" class="filled-in chk-col-blue"><div style="font-family:'B Nazanin' !important">مرا به یاد بسپار</div></MatCheckbox>
                            <MatButton class="float-right" Type="submit" Raised="true"><span style="font-family:'B Nazanin' !important">درون شو</span></MatButton>
                        </p>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                    </fieldset>
                </div>
            </MatThemeProvider>
        </EditForm>
    </div>
}
@code {

    MatTheme theme1 = new MatTheme()
    {
        Primary = "#212121",
        Secondary = "#4a148c"
    };
    string navigateTo = "";
    bool forgotPasswordToggle = false;
    LoginDto loginParameters { get; set; } = new LoginDto();
    ForgotPasswordDto forgotPasswordParameters { get; set; } = new ForgotPasswordDto();
    UserInfoDto userInfo = null;
    public bool IsLoggedIn = false;
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoggedIn = false;
        userInfo = null;

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            userInfo = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserInfo();

            IsLoggedIn = true;
        }

        //https://gist.github.com/SteveSandersonMS/175a08dcdccb384a52ba760122cd2eda Examples
        //if (user.IsInRole("Admin"))
        //{
        // Perform some action only available to users in the 'admin' role
        //}
    }

    async void LogoutClick()
    {
        await ((IdentityAuthenticationStateProvider)authStateProvider).Logout();
        //navigationManager.NavigateTo("/account/login");
    }
    async Task SubmitLogin()
    {
        try
        {
            var response = await ((IdentityAuthenticationStateProvider)authStateProvider).Login(loginParameters);
            if (response.StatusCode == 200)
            {
                // On successful Login the response.Message is the Last Page Visited from User Profile
                // We can't navigate yet as the setup is proceeding asynchronously
                if (!string.IsNullOrEmpty(response.Message))
                {
                    navigateTo = response.Message;
                }
                else
                {
                    navigateTo = "/dashboard";
                }
            }
            else
            {
                matToaster.Add(response.Message, MatToastType.Danger, "Login Attempt Failed");
            }
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Login Attempt Failed");
        }
    }

    async Task ForgotPassword()
    {
        try
        {
            await ((IdentityAuthenticationStateProvider)authStateProvider).ForgotPassword(forgotPasswordParameters);
            matToaster.Add("Forgot Password Email Sent", MatToastType.Success);
            forgotPasswordParameters.Email = "";
            forgotPasswordToggle = false;
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Reset Password Attempt Failed");
        }
    }
}