@using Microsoft.AspNetCore.Components;
@inject NavigationManager navigationManager
@layout LoginLayout
@inject AuthenticationStateProvider authStateProvider
@inject AppState appState
@implements IDisposable
<div class="text-right" id="sidebar-wrapper" dir="rtl" style="margin:0 .5rem 6rem .5rem;">
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4 col">
            @if (IsLoggedIn)
            {
                <div class="list-group list-group-flush">
                    <button @onclick="@(e=>navigationManager.NavigateTo(" "))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-home fa-fw"></i>پیشگفتار</div></button>
                    @*<button @onclick="@(e=>navigationManager.NavigateTo("todo_list"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-list-alt fa-fw"></i>&nbsp;فهرست کارها</div></button>*@
                    <button @onclick="@(e=>navigationManager.NavigateTo("log"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-eye fa-fw"></i>&nbsp;گزارش سامانه</div></button>
                    @*<button @onclick="@(e=>navigationManager.NavigateTo("dashboard"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-tachometer fa-fw"></i>پیشخوان</div></button>*@
                    @*<button @onclick="@(e=>navigationManager.NavigateTo("admin/users"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-users fa-fw"></i>کاربران</div></button>*@
                    @*<button @onclick="@(e=>navigationManager.NavigateTo("admin/roles"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-key fa-fw"></i>دسترسی‌ها</div></button>*@
                    <button @onclick="@(e=>navigationManager.NavigateTo("forum"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-comments fa-fw"></i>پیام‌رسان</div></button>
                    <button @onclick="@(e=>navigationManager.NavigateTo("account/profile"))" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-user-circle fa-fw"></i>کاربر: @userInfo.FirstName</div></button>
                    <button @onclick="@(e=>LogoutClick())" href="@navigationManager.ToAbsoluteUri(" ").AbsoluteUri" class="list-group-item btn-outline-dark d-flex justify-content-between"><div><i class="fa fa-sign-out fa-fw"></i>پایان کار با برنامه</div></button>
                </div>
            }
            else
            {
                <EditForm Model="@loginParameters" OnValidSubmit="@SubmitLogin">
                    <div class="form-group">
                        <input type="text" @bind="@loginParameters.UserName" Label="همراه" class="form-control">
                    </div>
                    <div class="form-group">
                        <input type="password" @bind="@loginParameters.Password" Label="گذرواژه" class="form-control">
                    </div>
                    <div class="form-group form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" @bind="@loginParameters.RememberMe" id="remember">
                        <label class="form-check-label" for="remember">
                            <span class="badge badge-light">مرا به یاد بسپار</span>
                        </label>
                    </div>
                    <button type="submit" class="btn btn-primary btn-block mb-3">درون شو</button>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </EditForm>
                <button @onclick="@(e=>navigationManager.NavigateTo("account/phoneverification"))" class="btn btn-primary btn-block mb-3"><div>ثبت نام</div></button>
            }
        </div>
        <div class="col-md-4"></div>
    </div>
</div>
@code {
    string navigateTo = "";
    bool forgotPasswordToggle = false;
    LoginDto loginParameters { get; set; } = new LoginDto();
    ForgotPasswordDto forgotPasswordParameters { get; set; } = new ForgotPasswordDto();
    UserInfoDto userInfo = null;
    public bool IsLoggedIn = false;
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }
    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        appState.ToggleNavState();
    }
    void IDisposable.Dispose()
    {
        navigationManager.LocationChanged -= LocationChanged;
    }
    protected override async Task OnParametersSetAsync()
    {
        IsLoggedIn = false;
        userInfo = null;

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            userInfo = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserInfo();

            IsLoggedIn = true;
        }

        //https://gist.github.com/SteveSandersonMS/175a08dcdccb384a52ba760122cd2eda Examples
        //if (user.IsInRole("Admin"))
        //{
        // Perform some action only available to users in the 'admin' role
        //}
    }

    async void LogoutClick()
    {
        await ((IdentityAuthenticationStateProvider)authStateProvider).Logout();
        navigationManager.NavigateTo(" ");
    }
    async Task SubmitLogin()
    {
        var response = await ((IdentityAuthenticationStateProvider)authStateProvider).Login(loginParameters);
        if (response.StatusCode == 200)
        {
            // On successful Login the response.Message is the Last Page Visited from User Profile
            // We can't navigate yet as the setup is proceeding asynchronously
            if (!string.IsNullOrEmpty(response.Message))
            {
                navigateTo = response.Message;
            }
            else
            {
                navigateTo = "/dashboard";
            }
        }
        else
        {
        }
    }

    async Task ForgotPassword()
    {
        await ((IdentityAuthenticationStateProvider)authStateProvider).ForgotPassword(forgotPasswordParameters);
        forgotPasswordParameters.Email = "";
        forgotPasswordToggle = false;
    }
}